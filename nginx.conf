# file extension to mime-type mapping
# kind of workaround because nginx can detect mime-type only for local file
map $extension $detect_content_type {
    ~*^xml|rss|xls$       text/xml;
    ~*^atom$              application/atom+xml;
    ~*^xhtml$             application/xhtml+xml;

    ~*^shtml|htm|html$    text/html;
    ~*^htc$               text/x-component;
    ~*^manifest|appcache$ text/cache-manifest;

    ~*^css$               text/css;
    ~*^json$              application/json;
    ~*^coffee$            application/coffeescript;
    ~*^js$                application/x-javascript;

    ~*^vcf|vcard$         text/vcard;

    default               '';
}

server {
    server_name ~^(?<provider>(raw|gist)).githack.com$;

    location ~* ^/.+/.+/.+/.+\.(?<extension>[a-zA-Z]+) {
        # to be able to resolve remote server name from a variable
        resolver 8.8.8.8;

        set $origin $provider.github.com;
        set $requested_content_type $detect_content_type;

        # if we do not know this extension, let's redirect
        if ($requested_content_type = '') {
            return 302 https://$origin$request_uri;
        }

        proxy_pass https://$origin;

        # we need to hide these headers in order to redefine them
        # if we don't, they will be set twice
        proxy_hide_header Content-Type;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header X-Content-Type-Options;

        add_header Access-Control-Allow-Origin *;
        add_header X-Content-Type-Options no-sniff;

        # magic!
        add_header Content-Type $requested_content_type;
    }
}
